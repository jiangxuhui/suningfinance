import urllib3
import requests
from Crypto.Cipher import AES
from binascii import b2a_hex, a2b_hex
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5
import time
import hashlib
import hmac
import base64
from functools import reduce
from urllib.parse import quote
from urllib.parse import unquote
import json
urllib3.disable_warnings()  #去掉ssl警告
import re
import  uuid
'''前置1：MD5加密函数'''
def generateMD5(str):
    h1=hashlib.md5()
    h1.update(str.encode('utf-8'))
    return h1.hexdigest()

'''前置2：RSA加密函数'''
def generateRSA(key, text):
    rsakey = RSA.importKey(key)
    cipher = Cipher_pkcs1_v1_5.new(rsakey)
    cipher_text = base64.b64encode(cipher.encrypt(text.encode(encoding="utf-8")))
    rsa_text = str(cipher_text, 'utf-8')
    #rsa_text=rsa_text.replace('%2B','+').replace('%2F','/').replace('%3D','=')
    return rsa_text

'''前置3：AES加密函数'''
def generateAES(key,text):
    bs = len(key)
    endode_text=text.encode()
    length=len(endode_text)
    PADDING = lambda s: s + (bs - length % bs) * chr(bs - length % bs)
    entext = PADDING(text)
    aes = AES.new(str.encode(key), AES.MODE_ECB)
    aes_text=str(b2a_hex(aes.encrypt(str.encode(entext))), encoding='utf-8')
    aes_text=aes_text.upper()
    return aes_text

'''前置4：AES解密函数'''
def ungenerateAES(key,text):
    aes = AES.new(str.encode(key), AES.MODE_ECB)
    #aes_text = aes.decrypt(a2b_hex(text)).decode()
    aes_text = aes.decrypt(a2b_hex(text))
    aes_text = re.compile('[\\x00-\\x08\\x0b-\\x0c\\x0e-\\x1f\n\r\t]').sub('', aes_text.decode())
    return aes_text

'''Hex转换函数'''
def toHex(str):
    lst = []
    for ch in str:
        hv = hex(ord(ch)).replace('0x', '')
        if len(hv) == 1:
            hv = '0' + hv
        lst.append(hv)
    return reduce(lambda x, y: x + y, lst)

'''
步骤二：提交数据
'''

deviceId='1E6B1539-D151-4D0F-9E12-92516BB60B3D'
randomPwd='wQpJRq4yhDV0mnGW'
password='1234qwer'
userName='18317041451'

password_key = """-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvIYZvc4oZKA26ukUXHR8C5Szfmwk1V5E5EyW5BPyiYL5bpKKYNbAsgXyCZCIOwx4B8DsGpACax8
0EqeJ43NAarGH4zqXUHNbTNnvSpFr4EYmnMegSG7KpAZ9CjY19c6SaEfAopA7/Td+BWCqE6z4G+gSLBboDhRFtFtbrgjumbjkkwaAweuRib/Nzm6FV6ixk5
mCAdAZ8bXcgtG0Cp0k4m0AXMwMza5Nt/yV+gCzwqH746WvVZWnFHsST4MohFq2kncu2fAWFo5uUI5RsBY4JHcG4/U9TV43vwQHiiY5dw/V5ZnvtHRBQ2mSN
6yi0ez7yh0YV+7nMfrbZKb5u+aKIwIDAQAB
-----END PUBLIC KEY-----"""

ftpgs_key = """-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA348XeSOeOz3Lgfq7oIMv35MN6yPCrpiSkRjDcDYBgZW4m6VbJ2ALzqfM7bb+08A/5CRH2DERJ/s
OgaCL2grmdu2I2mqsPq+kUecPIs+aXdmwIOX42IDgGJYM3Wtifc7A0ApFnqww2x0FL83fhli5Nm7wTwrP/1yxb/zpjrowzlBxglGYNHWSsNGQCft0zLe/UI
U2PK8zLTCZAtyasETxMcqiCIuqbgZ04WCdiWqUO7EghK8nMfrV8CRzofTjPmcAZK3tI5crE8ImOXt2QtP3uOrJXIlwI6bTC+fYswgC/Co6HocvfI1fMSSFg
KDGWLiSK1Yt4Qt9SepGDTrJNc90NwIDAQAB
-----END PUBLIC KEY-----"""


'''生成参数data'''
'''生成滑块token函数'''
def slide_token():
    t=time.strftime("%y%m%d%H%M%S",time.localtime())
    print("t:",t)
    strone="0^123^1080,1776^-^-^1%s^-^10.25.23.37^5.1^352136063328633" %(t)
    strtwo="%sslide" %(strone)
    strthree=generateMD5(strtwo) #调用MD5加密函数
    a = strthree.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('d', 'D').replace('e', 'E').replace('f','F')
    strfour=a + '_'+strone
    strfive=base64.b64encode(strfour.encode('utf-8'))
    strlast=str(strfive,'utf-8')
    return strlast

newstr=slide_token()
print('newstr:',newstr)
rsa_text=generateRSA(password_key,password)
print('rsa_text:',rsa_text)

headers_login={
#"terminal":"12",
#"et":"1",
"terminalType":"EPP_IOS",
#"eppVersion":"6.6.25"
}


u1=str(uuid.uuid4())
u1=u1.replace('-','')
print(u1)


time_start=time.time() #time.time()为1970.1.1到当前时间的毫秒数
print(time_start)
time_start=str(time_start).replace(".","")
time_start=time_start[0:13]
print("time_start:",time_start)

gsBizNo=u1+"_"+time_start
print("gsBizNo:",gsBizNo)


parameters=str({
	"deviceId": "1E6B1539-D151-4D0F-9E12-92516BB60B3D",
	"shumeiDeviceId": "2019052114563375c760ca5e036461d24f40a05d97dc8b0119631b1a57c8e6",
	"userName": userName,
	"clientMAC": "",
	"verifyCode": "",
	"password": rsa_text,
	"gsBizNo": gsBizNo,
	"sillerToken": newstr
	"token": "TICWq2R2F8fiidg6aUlfD5b95",
	"verifyCodeUuid": "e36fce5e-2a6c-4c74-af0b-18bfd0c7f60e",
	"keyIndex": "0001"})

print("parameters:",parameters)
m=parameters.replace(' ','').replace("'",'"')
print('n:',m)
n=quote(m)
print('quote转码后的参数：',n)

data=generateAES(randomPwd,n)
print('AES加密后最终生成的data:',data)

'''步骤二：生成参数rpd'''
#rpd是AES密钥讲过RSA加密后生成的
rpd=generateRSA(ftpgs_key,randomPwd)
print('RSA加密后生成的rpd：',rpd)

'''步骤三：生成参数gsSign'''
check_sign="data="+data+"&"+"rpd="+rpd
print("需要验签的参数：",check_sign)
message = (check_sign).encode('utf-8')
print("message",message)
secret = ("AH6QfUTq").encode('utf-8')
print("secret",secret)

signature = hmac.new(secret, message, digestmod=hashlib.sha256).digest()
print(signature)
covert_check_sign = "".join(map(chr, signature)) #bytes转字符串，不用考虑编码
#print(covert_check_sign)
gsSign=toHex(covert_check_sign) #调用Hex转换函数
print('gsSign:',gsSign)


'''提交数据并解密'''

data_login={"data":data,"gsSign":gsSign,"rpd":rpd}
print('最终参数：',data_login)

#新港
proxies1 = {
  "http": "http://10.19.40.101:8888",
  "https": "http://10.19.40.101:8888",
}


url_login='https://ftpgsprexg.cnsuning.com/ftpgs/basic/login/loginByUserAlias.do'
print(url_login)
#url_login='https://ftpgsprexg.cnsuning.com/ftpgs/basic/login/loginByUserAliasSecure'
req=requests.post(url_login,headers=headers_login,data=data_login,verify=False)
print(req.json())
responseContent=json.loads((req.json()['payload']))['responseContent']
#print(responseContent)

print('')
print('')
responseContent=ungenerateAES(randomPwd,responseContent)
print(responseContent)
